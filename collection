1、IIC与SPI之间的区别。
Q:I2C (Inter-Integrated Circuit) 和 SPI (Serial Peripheral Interface) 都是串行通信协议，用于连接多个设备进行数据交换。它们有一些不同之处，下面是它们之间的一些主要区别：
@1总线结构:
I2C：使用两根线（SDA和SCL）实现双线半双工的串行通信，支持多主设备和多从设备连接到同一个总线上。
SPI：通常使用四根线（MISO、MOSI、SCK和SS/CS）实现全双工的串行通信，每个从设备都有一个独立的片选信号。
@2通信模式:
I2C：支持主从模式和从模式，主设备发起通信并控制总线上的其他设备。
SPI：通常是主从模式，主设备控制通信并通过片选信号选择与之通信的从设备。
@3传输速率:
I2C：通常速度较低，主要用于连接速度不高的设备。
SPI：速度可以更高，适用于高速数据传输。
@4设备数量:
I2C：支持多个设备连接到同一总线上，使用7位或10位地址标识从设备。
SPI：由于每个从设备需要一个片选信号，连接大量设备可能需要多个片选信号。
@5协议:
I2C：基于起始条件和停止条件来控制通信，支持主设备向从设备发起读写操作。
SPI：主从设备之间通过时钟同步来进行数据传输，通常需要手动控制片选信号。
@6应用领域:
I2C：适用于连接多种类型的低速外设，如温度传感器、EEPROM等。
SPI：适用于需要高速数据传输的应用，如存储器、传感器、显示器等。

2、结构体和联合体之间的区别
Q:@1 内存分配：
 结构体：每个成员都会占据自己的内存空间，结构体的大小等于所有成员大小的总和，成员之间不共享内存。
 联合体：所有成员共享同一块内存空间，联合体的大小等于最大成员的大小，不同成员共用同一块内存。
@2访问成员：
 结构体：可以同时访问多个成员，成员之间互不干扰。
 联合体：只能同时访问一个成员，访问一个成员会影响其他成员的值。
@3数据存储：
 结构体：成员在内存中按照声明的顺序依次存储，各个成员的值互不影响。
 联合体：不同成员共享同一块内存，写入一个成员的值会覆盖其他成员的值。
@4用途：
 结构体：适用于存储多个不同类型的数据，可以表示复杂的数据结构。
 联合体：适用于存储多个不同类型的数据，但是只会使用其中一个数据，节省内存空间。
@5定义方式：
 结构体：使用 struct 关键字定义，成员按照顺序声明。
 联合体：使用 union 关键字定义，成员按照顺序声明。

3、计算机网络中TCP/IP协议分层及各层功能？
应用层：
功能：为用户提供各种应用服务，包括文件传输、电子邮件、远程登录等。
主要协议：HTTP、FTP、SMTP、POP3、IMAP、Telnet、DNS等。

传输层：
功能：提供端到端的通信和数据传输，保证数据的可靠性和顺序性。
主要协议：TCP（传输控制协议）和UDP（用户数据报协议）。
TCP：提供可靠的、面向连接的数据传输，保证数据的完整性和顺序性。
UDP：提供不可靠的、无连接的数据传输，适用于实时通信和广播。

网络层：
功能：负责数据在网络中的传输，进行路由选择和逻辑寻址，实现不同网络之间的通信。
主要协议：IP（Internet协议）、ICMP（Internet控制消息协议）和ARP（地址解析协议）。
IP：负责数据的分组和路由，将数据从源主机发送到目标主机。
ICMP：用于网络中的控制和错误报告，如ping命令。
ARP：将IP地址转换为MAC地址，实现数据链路层的通信。

数据链路层：
功能：负责在物理链接上传输数据帧，进行错误检测和纠正，实现相邻节点之间的通信。
主要协议：以太网协议、PPP协议等
以太网协议：
以太网是一种常见的局域网（LAN）技术，用于在局域网内传输数据。
物理层：以太网使用电缆、光纤等传输介质，支持不同的传输速率（如10 Mbps、100 Mbps、1 Gbps等）。
数据链路层：以太网协议定义了帧的结构、MAC地址的使用和冲突检测等。
CSMA/CD：以太网采用载波监听多路访问/碰撞检测（CSMA/CD）机制，用于解决多台设备同时发送数据时可能发生的碰撞问题。

PPP协议（Point-to-Point Protocol）：
PPP是一种用于点对点通信的协议，常用于拨号上网、广域网连接等场景。
物理层：PPP可以在不同的物理介质上工作，如串口、ISDN、DSL等。
数据链路层：PPP定义了帧的格式、控制字段和错误检测机制，包括PAP（密码验证协议）和CHAP（挑战握手认证协议）等身份验证方法。
PPP的可靠性：PPP协议具有连接的建立、维护和终止机制，以及错误检测和恢复机制，保证了点对点通信的可靠性。

4、IP协议如何确定路由？
  IP协议通过路由选择算法来确定数据包在网络中的路由，即选择哪条路径将数据包从源主机传送到目标主机。IP协议中的路由选择涉及到以下几个主要步骤和概念：
路由表：
每个路由器都维护着一个路由表，其中记录了各种网络地址与相应的出口接口的映射关系。路由表中的每一条记录称为路由项，它包含目标网络的地址范围、下一跳地址（下一个路由器的地址）、出口接口等信息。

目标网络地址与子网掩码：
在IP协议中，每个主机和路由器都有一个IP地址。IP地址由网络部分和主机部分组成，通过子网掩码来划分网络部分和主机部分。路由器根据目标IP地址的网络部分来匹配路由表中的路由项，以确定下一跳的地址和出口接口。

最长前缀匹配：
路由器在路由表中使用最长前缀匹配的方式来确定路由。即在路由表中找到最长的网络地址前缀与目标IP地址匹配的路由项。这保证了路由选择的准确性和精确性。

路由选择算法：
IP协议使用不同的路由选择算法来决定数据包的路由。常见的算法有：
静态路由：管理员手动配置路由表中的路由项。
动态路由：路由器通过一定的协议（如RIP、OSPF、BGP等）交换路由信息，从而自动更新路由表，使得网络能够动态适应拓扑变化。
默认路由：如果路由表中找不到与目标地址匹配的路由项，则可以设置一个默认路由，将数据包发送到指定的下一跳。
路由器间的路由信息交换：
在大规模网络中，不同的路由器需要互相交换路由信息以构建正确的路由表。这可以通过路由协议来实现，路由协议会周期性地广播或发送路由信息，使得网络中的路由器能够了解整个网络的拓扑结构。

5、Redis为什么这么快？
最主要的原因肯定是他是基于内存存储，读写超级快
其次是执行命令是单线程，避免了线程上下文切换带来的开销
第三个是Redis底层的数据结构如SDS、SkipList做了大量的优化，性能极好
Redis6.0后 使用IO多路复用来并发处理连接。

追问：这么快咋不用来做主数据库呢？
内存资源相较于磁盘较小
数据存储在内存中如果崩溃或者断电来不及及时备份，虽然redis支持rdb和aof
访问控制不足
事务也比较简单，跨多个键就不行



























