1、IIC与SPI之间的区别。
Q:I2C (Inter-Integrated Circuit) 和 SPI (Serial Peripheral Interface) 都是串行通信协议，用于连接多个设备进行数据交换。它们有一些不同之处，下面是它们之间的一些主要区别：
@1总线结构:
I2C：使用两根线（SDA和SCL）实现双线半双工的串行通信，支持多主设备和多从设备连接到同一个总线上。
SPI：通常使用四根线（MISO、MOSI、SCK和SS/CS）实现全双工的串行通信，每个从设备都有一个独立的片选信号。
@2通信模式:
I2C：支持主从模式和从模式，主设备发起通信并控制总线上的其他设备。
SPI：通常是主从模式，主设备控制通信并通过片选信号选择与之通信的从设备。
@3传输速率:
I2C：通常速度较低，主要用于连接速度不高的设备。
SPI：速度可以更高，适用于高速数据传输。
@4设备数量:
I2C：支持多个设备连接到同一总线上，使用7位或10位地址标识从设备。
SPI：由于每个从设备需要一个片选信号，连接大量设备可能需要多个片选信号。
@5协议:
I2C：基于起始条件和停止条件来控制通信，支持主设备向从设备发起读写操作。
SPI：主从设备之间通过时钟同步来进行数据传输，通常需要手动控制片选信号。
@6应用领域:
I2C：适用于连接多种类型的低速外设，如温度传感器、EEPROM等。
SPI：适用于需要高速数据传输的应用，如存储器、传感器、显示器等。

2、结构体和联合体之间的区别
Q:@1 内存分配：
 结构体：每个成员都会占据自己的内存空间，结构体的大小等于所有成员大小的总和，成员之间不共享内存。
 联合体：所有成员共享同一块内存空间，联合体的大小等于最大成员的大小，不同成员共用同一块内存。
@2访问成员：
 结构体：可以同时访问多个成员，成员之间互不干扰。
 联合体：只能同时访问一个成员，访问一个成员会影响其他成员的值。
@3数据存储：
 结构体：成员在内存中按照声明的顺序依次存储，各个成员的值互不影响。
 联合体：不同成员共享同一块内存，写入一个成员的值会覆盖其他成员的值。
@4用途：
 结构体：适用于存储多个不同类型的数据，可以表示复杂的数据结构。
 联合体：适用于存储多个不同类型的数据，但是只会使用其中一个数据，节省内存空间。
@5定义方式：
 结构体：使用 struct 关键字定义，成员按照顺序声明。
 联合体：使用 union 关键字定义，成员按照顺序声明。

3、计算机网络中TCP/IP协议分层及各层功能？
应用层：
功能：为用户提供各种应用服务，包括文件传输、电子邮件、远程登录等。
主要协议：HTTP、FTP、SMTP、POP3、IMAP、Telnet、DNS等。

传输层：
功能：提供端到端的通信和数据传输，保证数据的可靠性和顺序性。
主要协议：TCP（传输控制协议）和UDP（用户数据报协议）。
TCP：提供可靠的、面向连接的数据传输，保证数据的完整性和顺序性。
UDP：提供不可靠的、无连接的数据传输，适用于实时通信和广播。

网络层：
功能：负责数据在网络中的传输，进行路由选择和逻辑寻址，实现不同网络之间的通信。
主要协议：IP（Internet协议）、ICMP（Internet控制消息协议）和ARP（地址解析协议）。
IP：负责数据的分组和路由，将数据从源主机发送到目标主机。
ICMP：用于网络中的控制和错误报告，如ping命令。
ARP：将IP地址转换为MAC地址，实现数据链路层的通信。

数据链路层：
功能：负责在物理链接上传输数据帧，进行错误检测和纠正，实现相邻节点之间的通信。
主要协议：以太网协议、PPP协议等
以太网协议：
以太网是一种常见的局域网（LAN）技术，用于在局域网内传输数据。
物理层：以太网使用电缆、光纤等传输介质，支持不同的传输速率（如10 Mbps、100 Mbps、1 Gbps等）。
数据链路层：以太网协议定义了帧的结构、MAC地址的使用和冲突检测等。
CSMA/CD：以太网采用载波监听多路访问/碰撞检测（CSMA/CD）机制，用于解决多台设备同时发送数据时可能发生的碰撞问题。

PPP协议（Point-to-Point Protocol）：
PPP是一种用于点对点通信的协议，常用于拨号上网、广域网连接等场景。
物理层：PPP可以在不同的物理介质上工作，如串口、ISDN、DSL等。
数据链路层：PPP定义了帧的格式、控制字段和错误检测机制，包括PAP（密码验证协议）和CHAP（挑战握手认证协议）等身份验证方法。
PPP的可靠性：PPP协议具有连接的建立、维护和终止机制，以及错误检测和恢复机制，保证了点对点通信的可靠性。

4、IP协议如何确定路由？
  IP协议通过路由选择算法来确定数据包在网络中的路由，即选择哪条路径将数据包从源主机传送到目标主机。IP协议中的路由选择涉及到以下几个主要步骤和概念：
路由表：
每个路由器都维护着一个路由表，其中记录了各种网络地址与相应的出口接口的映射关系。路由表中的每一条记录称为路由项，它包含目标网络的地址范围、下一跳地址（下一个路由器的地址）、出口接口等信息。

目标网络地址与子网掩码：
在IP协议中，每个主机和路由器都有一个IP地址。IP地址由网络部分和主机部分组成，通过子网掩码来划分网络部分和主机部分。路由器根据目标IP地址的网络部分来匹配路由表中的路由项，以确定下一跳的地址和出口接口。

最长前缀匹配：
路由器在路由表中使用最长前缀匹配的方式来确定路由。即在路由表中找到最长的网络地址前缀与目标IP地址匹配的路由项。这保证了路由选择的准确性和精确性。

路由选择算法：
IP协议使用不同的路由选择算法来决定数据包的路由。常见的算法有：
静态路由：管理员手动配置路由表中的路由项。
动态路由：路由器通过一定的协议（如RIP、OSPF、BGP等）交换路由信息，从而自动更新路由表，使得网络能够动态适应拓扑变化。
默认路由：如果路由表中找不到与目标地址匹配的路由项，则可以设置一个默认路由，将数据包发送到指定的下一跳。
路由器间的路由信息交换：
在大规模网络中，不同的路由器需要互相交换路由信息以构建正确的路由表。这可以通过路由协议来实现，路由协议会周期性地广播或发送路由信息，使得网络中的路由器能够了解整个网络的拓扑结构。

5、Redis为什么这么快？
最主要的原因肯定是他是基于内存存储，读写超级快
其次是执行命令是单线程，避免了线程上下文切换带来的开销
第三个是Redis底层的数据结构如SDS、SkipList做了大量的优化，性能极好
Redis6.0后 使用IO多路复用来并发处理连接。

追问：这么快咋不用来做主数据库呢？
内存资源相较于磁盘较小
数据存储在内存中如果崩溃或者断电来不及及时备份，虽然redis支持rdb和aof
访问控制不足
事务也比较简单，跨多个键就不行

6、如何查找某个端口是否被占用,然后关闭占用
 netstat -tuln | grep <port>

7、场景题：如果你的数据是上亿量级的，如果有人做了select * 操作你会怎么办？
 处理上亿量级的数据，特别是在数据库中执行了 SELECT * 操作可能会导致严重的性能问题，甚至可能导致系统崩溃。这里有一些应对策略：

数据分页： 如果可能，考虑分页返回数据而不是一次性返回全部数据。这可以通过限制每次查询返回的数据行数来实现，从而减轻数据库负担。
选择性字段查询： 避免使用 SELECT *，而是只选择需要的字段。只选择那些对当前业务逻辑和显示需要的字段，这可以减少传输和处理的数据量。
索引优化： 为表中的关键字段添加适当的索引，以加速查询。索引可以大大提高查询的效率。
缓存机制： 对于经常查询的数据，考虑使用缓存机制，将查询结果缓存到内存中，以减轻数据库的压力。
分区和分片： 如果可能，对数据进行分区或分片，将数据分散到不同的表或数据库中。这有助于减轻单一数据库的负担。
压缩和归档： 对于历史数据，可以考虑将其压缩或归档，从而减少实际查询的数据量。
性能监控和优化： 使用数据库性能监控工具，识别慢查询和瓶颈，并进行必要的调整和优化。
限制访问权限： 限制数据库用户的访问权限，确保只有授权的用户可以执行查询操作。
查询优化： 编写高效的查询语句，使用适当的条件和筛选，以减少不必要的数据传输和处理。
数据清理： 定期清理不再需要的数据，从而减小数据库的体积，提高查询性能。

8、服务器支持什么类型的上传下载，支持多少的qps，日志文件怎么看（这个是最伤的，因为都是照着网上做的，就粗心没看日志）， 哪个系统上跑的项目，Linux的命令（如何查看进程等），如何调试自己的项目，怎么样看代码bug出错在哪里？

9、rpc调用
远程过程调用（Remote Procedure Call，RPC）是一种计算机通信协议，它允许程序调用其他地址空间（通常在远程系统上）的函数或过程，就像调用本地函数一样。这样可以使分布在不同计算机上的程序能够协同工作，实现分布式系统的开发。
在RPC中，调用方（通常称为客户端）通过发送一个请求，请求在远程系统上执行特定的函数，然后等待接收响应。

10、Http和RPC区别
  HTTP（Hypertext Transfer Protocol）和RPC（Remote Procedure Call）都是用于不同目的的通信协议。下面是它们的主要区别：
用途：
HTTP： HTTP是用于在客户端和服务器之间传输超文本（Hypertext）的协议，主要用于浏览器和服务器之间的通信，支持请求-响应模式，常用于Web应用。
RPC： RPC是一种远程过程调用协议，用于在分布式系统中不同计算机之间调用远程函数或过程，让它们像本地函数一样进行通信。
通信方式：
HTTP： HTTP通常是基于文本的，使用HTTP请求和HTTP响应进行通信，可以通过GET、POST等方法传输数据。
RPC： RPC协议可以使用不同的底层传输协议，如HTTP、TCP、UDP等。传输数据可以是二进制的、基于文本的，也可以使用其他格式如JSON、XML等。
数据交换格式：
HTTP： 常用的数据交换格式包括JSON、XML等，可以根据需求来选择。
RPC： 同样可以使用JSON、XML等格式，但也可以更加定制化地使用二进制等格式。
透明性：
HTTP： HTTP是相对较为透明的，可以在浏览器中查看请求和响应的内容。
RPC： RPC通常更加透明，让远程调用看起来像是本地调用，屏蔽了底层的细节。
语义：
HTTP： HTTP是一种无状态协议，每次请求都是独立的。它适合于无状态的、请求-响应式的通信。
RPC： RPC通常更加有状态，因为它可以在多个函数调用之间共享上下文和状态。

11、什么是异步io？讲讲触发模式？同步和异步模式下，线程池中的线程分别什么时候工作？
  允许程序在进行I/O操作时不需要等待数据准备或数据传输完成，而是可以继续执行其他任务，待数据就绪后再进行处理。
  触发模式：轮询、事件驱动、信号驱动、回调函数
  在异步模式下，线程池中的线程可以在执行一个任务的同时，同时执行其他任务，而不需要等待一个任务完全完成后才执行下一个任务。这是因为异步模式下线程是多任务共享的，它们可以在不同的时间点执行不同的任务，以提高执行效率。
  这与同步模式下的线程池有所不同，后者通常会等待一个任务完成后才执行下一个任务。

12、你的webserver为什么要连接数据库？(验证用户名和密码)怎么验证的？(服务器启动时把每条数据读到内存中用map存储)启动后有用户注册，先写数据库还是先写map？
  首先，将用户提供的注册信息写入数据库中，以确保用户信息持久化保存，这样即使服务器关闭后也能保留用户数据。
同时，将注册信息也写入内存中的Map或其他数据结构中，以提供快速的验证功能。将数据保存在内存中可以加速验证过程，因为不需要每次都访问数据库。

13、什么是内存屏障？
  也称为内存栅栏或内存障碍。内存屏障的目的是确保在多线程环境中，对共享内存的读写操作不会产生意外的结果或数据不一致性。
  强制内存顺序：内存屏障可以确保特定的内存操作按照程序中的指定顺序执行，防止编译器或处理器对指令进行重排序。这对于多线程编程至关重要，因为重排序可能导致数据竞争和不确定的行为。
  刷新缓存：内存屏障可以强制处理器刷新其缓存，以确保读取最新的数据，而不是缓存中的旧数据。这对于多核处理器中的线程之间共享数据时非常重要。
  禁止指令重排：内存屏障可以阻止编译器或处理器对指令进行重排，从而保持代码的逻辑顺序。这确保了程序行为的可预测性。

14、你的webserver怎么实现高并发的，使用协程的回调和使用线程的回调有什么区别
 使用协程的回调：
协程（Coroutine）：协程是一种轻量级的线程，可以在单个线程内执行并发操作，通常不需要创建额外的线程。协程可以在执行过程中暂停和恢复，从而有效地管理多个并发任务。
回调：使用协程的回调模式通常涉及异步编程，其中请求被发送后，不会阻塞主线程，而是通过协程回调来处理响应。这使得服务器可以同时处理多个请求，而不会因等待某个请求的响应而阻塞其他请求的处理。
优点：使用协程的回调可以有效地管理并发请求，减少了线程开销和上下文切换的成本。它通常具有更低的内存消耗，可以支持高并发的场景。

使用线程的回调：
线程：使用线程的回调模式通常涉及创建多个线程来处理请求。每个线程负责处理一个请求，这可以实现并发处理，但需要更多的系统资源。
回调：回调仍然可以用于异步编程，其中每个线程可以在发送请求后等待响应，而不会阻塞其他线程的执行。回调的目的是在请求完成时通知相应的线程。
优点：使用线程的回调可以充分利用多核处理器的性能，适用于处理计算密集型任务或需要大量CPU资源的情况。
区别和选择：
使用协程的回调通常更轻量级，对于 I/O 密集型操作（如网络请求）非常高效，因为它可以避免线程创建和上下文切换的开销。
使用线程的回调更适用于处理计算密集型任务，但可能需要更多的系统资源，因为每个线程都有一定的内存开销。

一个线程内的多个协程是串行执行的，不能利用多核，所以，显然，协程不适合计算密集型的场景。协程适合I/O 阻塞型。

协程 I/O 调度的典型过程如下：

协程创建：首先，创建一组协程，每个协程代表一个并发任务。这些协程通常使用特殊的关键字（例如 async 和 await）来标记异步操作。
事件循环（Event Loop）：事件循环是协程调度的核心组件。它负责管理协程的执行顺序，并在需要时挂起和恢复协程。事件循环通常在一个主线程中运行，负责监控事件的发生，例如网络请求、文件 I/O、定时器等。
异步 I/O 操作：协程可以执行异步 I/O 操作，例如从网络读取数据、写入文件、等待数据库查询等。当协程执行到需要等待 I/O 操作完成的点时，它会通过 await 关键字将控制权交还给事件循环，并标记自己为等待状态。
事件触发：事件循环等待 I/O 操作完成或其他事件的发生。一旦事件发生，事件循环会检查等待状态的协程，并恢复等待的协程，使其继续执行。这可以是网络请求完成、文件读取完成等。
协程调度：事件循环会继续执行其他就绪状态的协程，按照一定的调度策略执行它们。这可以是轮询、优先级调度、按需调度等。
循环迭代：事件循环会不断迭代上述过程，直到所有协程都完成。

15、局域网的网络协议
Ethernet（以太网）：Ethernet是一种最常见的局域网技术，它定义了计算机如何在局域网上共享数据。它使用CSMA/CD（Carrier Sense Multiple Access with Collision Detection）协议来管理共享通信介质。

TCP/IP协议套件：TCP/IP是一组通信协议，它们构成了互联网的基础。在局域网中，通常使用TCP/IP协议套件来实现网络通信。它包括了诸如IP（Internet Protocol）、TCP（Transmission Control Protocol）、UDP（User Datagram Protocol）等协议。

Wi-Fi（无线局域网）：Wi-Fi技术允许无线设备通过无线接入点（Access Point，AP）连接到局域网。Wi-Fi通常基于IEEE 802.11系列标准，并支持无线数据传输和互联网接入。

ARP（地址解析协议）：ARP用于将IP地址映射到物理MAC地址，以便在局域网中正确路由数据包。它在IPv4网络中广泛使用。

DHCP（动态主机配置协议）：DHCP协议允许计算机在局域网上动态获取IP地址、子网掩码、网关和DNS服务器的配置信息，以便无缝地加入网络。

DNS（域名系统）：DNS用于将域名映射到IP地址，以便在网络上查找主机和服务。局域网中通常有一个本地DNS服务器，用于解析局域网内部的域名。

VLAN（虚拟局域网）：VLAN允许将局域网划分为多个虚拟子网，每个子网可以独立管理和配置。这有助于隔离流量和提高网络安全性。

ICMP（Internet控制消息协议）：ICMP用于在IP网络上传输错误和控制消息。它包括ping和traceroute等工具，用于网络故障排除和诊断。

16、












